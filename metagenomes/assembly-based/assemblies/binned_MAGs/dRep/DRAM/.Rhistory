install.packages("ggplot2")
install.packages("vegan")
install.packages("ape")
library(ecodist)
library(vegan)
?mgroup
setwd("/Volumes/JensenLabMGs/alex_alyssa-MooreaMGs/moorea2020/metagenome_processing/metabolomics")
brominated <- read.table("Feat772_452_dibrominated.txt", header = T, sep = '\t', row.names = 1)
View(brominated)
brominated[brominated <= 1E3] <- NA
my.min <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
brominated[is.na(brominated)] <- my.min(brominated) / 10
brominated$sampleID <- rownames(brominated)
bgccov <- read.table("BGCcoverages.txt", header = T, sep = '\t', row.names = 1)
bgcvar <- bgccov[ , grepl( "var" , names( bgccov ) ) ]
bgcvar$contigID <- rownames(bgcvar)
bgccov2 <- bgccov[ , !grepl( "var" , names( bgccov ) ) ]
bgccov2$contigID <- rownames(bgccov2)
library(reshape2)
mbgcvar <- melt(bgcvar)
mbgcvar$sampleID <- lapply(strsplit(as.character(mbgcvar$variable), "\\."), "[", 2)
mbgcvar <- mbgcvar[ , c("sampleID", "contigID", "value")]
colnames(mbgcvar) <- c("sampleID", "contigID", "variance")
mbgccov <- melt(bgccov2)
mbgccov$sampleID <- lapply(strsplit(as.character(mbgccov$variable), "\\."), "[", 2)
mbgccov <- mbgccov[ , c("sampleID", "contigID", "value")]
totalcov <- merge(mbgccov, mbgcvar, by = c("contigID", "sampleID"))
totalcov$sampleID <- vapply(totalcov$sampleID, paste, collapse = ", ", character(1L))
totalbromo <- merge(totalcov, brominated, by = "sampleID", all = T)
totalbromo$logINT <- log(totalbromo$peak_intensity)
### get the p-values extracted from the linear models
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
## summarize the topn this by taking slopes (expect positive), R2, and p-value using above function
library(dplyr)
slopes <- totalbromo %>%
group_by(contigID) %>%
do({
mod = lm(value ~ logINT, data = .)
data.frame(Intercept = coef(mod)[1],
Slope = coef(mod)[2],
R2 = summary(mod)$r.squared,
pvalue = lmp(mod))
})
library(ggplot2)
ggplot(totalbromo, aes(x = logINT, y = value, color = contigID)) +
geom_point() +
theme_bw() +
theme(legend.position="none") +
geom_smooth(method = "lm", se = F)
View(slopes)
### check for the myxo MAG BGC
myxo <- totalbromo[totalbromo$contigID == "MO_082.c_4",]
fit <- lm(data=myxo, logINT ~ value)
summary(aov(fit))$r.squared
lm(data=myxo, logINT ~ value)
rm(list=ls())
setwd("/Volumes/JensenLabMGs/alex_alyssa-MooreaMGs/moorea2020/metagenome_processing/metabolomics")
library(vegan)
library(ggplot2)
library(ecodist)
library(RFmarkerDetector) # https://rdrr.io/cran/RFmarkerDetector/
totalMS <- read.table(file = "allMS1data_sedimentV2.txt", header = T, sep = '\t', row.names = 1)
totalMS1 <- totalMS[,!grepl("duration", colnames(totalMS))]
totalMS2 <- totalMS1[,!grepl("RT", colnames(totalMS1))]
totalMS3 <- totalMS2[,!grepl("m.z", colnames(totalMS2))]
totalMS4 <- totalMS3[,!grepl("Solvent", colnames(totalMS3))]
totalMS2 <- totalMS4[,!grepl("area", colnames(totalMS4))]
colnames(totalMS2) = gsub(".Peak.height", "", colnames(totalMS))
baseMSdf <- totalMS2
# read in metadata
metadata <- read.table("../Metabolomics_Metadata_sediment.txt", header = T, sep = '\t', row.names = 1, comment.char = "")
staxcolors <- setNames(as.character(metadata$sitecolor), metadata$ATTRIBUTE_Site)
totalMS <- totalMS2
totalMS[totalMS <= 1E3] <- NA
# remove all rows with NA - meaning only found in media
totalMS2 <- totalMS[rowSums(is.na(totalMS)) != ncol(totalMS), ]
my.min <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
totalMS2[is.na(totalMS2)] <- my.min(totalMS2) / 10
tflex <- t(totalMS2)
logtflex <- log(tflex, 2)
paretotflex <- paretoscale(logtflex)
scaletflex <- scale(logtflex)
dist.mat <- vegdist(paretotflex, method = "euclidean", diag = T)
clust.res <- hclust(dist.mat)
plot(clust.res)
hist(t(logtflex))
hist(t(scaletflex))
hist(t(paretotflex))
# Use scale = TRUE if your variables are on different scales (e.g. for abiotic variables).
pcatflex2 <- merge(metadata, paretotflex, by = 0)
rownames(pcatflex2) <- pcatflex2$Row.names
pcatflex <- pcatflex2[pcatflex2$ATTRIBUTE_Coordinates != "seawater",]
# PERMANOVA stats analysis
perm.pareto <- adonis2(dist.mat ~ ATTRIBUTE_Site, data=pcatflex, permutations = 999, method = "euclidean")
perm.pareto
# PCoA analysis for MS data
pca <- prcomp(t(paretotflex), center = F, scale = F)
pcaresults <- summary(pca)
pcaresults$importance[3,1:3]
pcadata <- as.data.frame(pcaresults$rotation)
pcadataPC12 <- pcadata[, c(1:3)]
pcameta <- merge(metadata, pcadataPC12, by = 0, all = F)
staxcolors <- setNames(as.character(pcameta$sitecolor), pcameta$ATTRIBUTE_Site)
ggplot(pcameta, aes(PC1, PC2)) +
geom_point(aes(color = ATTRIBUTE_Site), size = 4) +
geom_text(aes(label = ATTRIBUTE_SampleID)) +
theme_bw() +
scale_colour_manual(values = staxcolors)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
summPC1 <- summarySE(pcameta, measurevar = "PC1", groupvars = c("ATTRIBUTE_Site", "sitecolor"))
summPC1$PC1sd <- summPC1$sd
summPC2 <- summarySE(pcameta, measurevar = "PC2", groupvars = c("ATTRIBUTE_Site", "sitecolor"))
summPC2$PC2sd <- summPC2$sd
totalPC12temp <- merge(summPC1, summPC2, by = c("ATTRIBUTE_Site", "sitecolor"))
totalPC12 <- totalPC12temp[, c("ATTRIBUTE_Site", "PC1", "PC2", "PC1sd", "PC2sd", "sitecolor")]
staxcolors <- setNames(as.character(totalPC12$sitecolor), totalPC12$ATTRIBUTE_Site)
ggplot(totalPC12, aes(PC1, PC2)) +
geom_errorbarh(aes(xmin = PC1 - PC1sd, xmax = PC1 + PC1sd), height = 0) +
geom_errorbar(aes(ymin = PC2 - PC2sd, ymax = PC2 + PC2sd), width = 0) +
geom_point(aes(color = ATTRIBUTE_Site), size = 6, shape = 15) +
theme_bw() +
scale_colour_manual(values = staxcolors) +
scale_fill_manual(values = staxcolors)
site6 <- c("MO_167.mzXML", "MO_170.mzXML", "MO_180.mzXML", "MO_184.mzXML",
"MO_188.mzXML", "MO_192.mzXML")
totalMS <- baseMSdf[ , !(names(baseMSdf) %in% site6)]
totalMS[totalMS <= 1E3] <- NA
## need to remove features only found in site 6
totalMS2 <- totalMS[rowSums(is.na(totalMS)) != ncol(totalMS), ]
my.min <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
totalMS2[is.na(totalMS2)] <- my.min(totalMS2) / 10
tflex <- t(totalMS2)
logtflex <- log(tflex, 2)
paretotflex <- paretoscale(logtflex)
scaletflex <- scale(logtflex)
hist(logtflex)
hist(paretotflex)
hist(scaletflex)
# Use scale = TRUE if your variables are on different scales (e.g. for abiotic variables).
pcatflex2 <- merge(metadata, paretotflex, by = 0)
rownames(pcatflex2) <- pcatflex2$Row.names
# PERMANOVA stats analysis
dist.mat <- vegdist(paretotflex, method = "euclidean", diag = T)
perm.pareto <- adonis2(dist.mat ~ ATTRIBUTE_Reef*ATTRIBUTE_Site, data=pcatflex2, permutations = 999, method = "euclidean")
perm.pareto
# PCoA analysis for MS data
pca <- prcomp(t(paretotflex), center = F, scale = F)
pcaresults <- summary(pca)
pcaresults$importance[3,1:3]
pcadata <- as.data.frame(pcaresults$rotation)
pcadataPC12 <- pcadata[, c(1:3)]
pcameta <- merge(metadata, pcadataPC12, by = 0, all = F)
staxcolors <- setNames(as.character(pcameta$sitecolor), pcameta$ATTRIBUTE_Site)
ggplot(pcameta, aes(PC1, PC2)) +
geom_point(aes(color = ATTRIBUTE_Site), size = 4) +
geom_text(aes(label = ATTRIBUTE_SampleID)) +
theme_bw() +
scale_colour_manual(values = staxcolors)
library("FactoMineR")
library("factoextra")
site.pca <- PCA(pcatflex2[,c(9:length(colnames(pcatflex2)))], graph = FALSE)
fviz_contrib(site.pca, choice = "var", axes = 1:2, top = 30)
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 6,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature772")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 6,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature256", "feature362", "feature370", "feature666",
"feature11", "feature50", "feature672", "feature1627",
"feature615", "feature1984", "feature801", "feature1404",
"feature1582", "feature772", "feature1620", "feature1631",
"feature1510")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 6,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature684", "feature1164", "feature579", "feature315",
"feature370", "feature666", "feature50", "feature672",
"feature1627", "feature1984", "feature801", "feature772",
"feature1620", "feature801", "feature804", "feature831",
"feature248", "feature616", "feature1520", "feature1613")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 6,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature672", "feature709", "feature248", "feature788",
"feature615", "feature1984", "feature801", "feature489",
"feature772", "feature815", "feature460", "feature1913",
"feature1620", "feature183", "feature702", "feature370")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
pdf("PCA-biplot_wfeatures.pdf", height = 14, width = 10.88)
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 6,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature672", "feature709", "feature248", "feature788",
"feature615", "feature1984", "feature801", "feature489",
"feature772", "feature815", "feature460", "feature1913",
"feature1620", "feature183", "feature702", "feature370")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
dev.off()
pdf("PCA-biplot_wfeatures.pdf", height = 14, width = 10.88)
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 10,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature672", "feature709", "feature248", "feature788",
"feature615", "feature1984", "feature801", "feature489",
"feature772", "feature815", "feature460", "feature1913",
"feature1620", "feature183", "feature702", "feature370")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
dev.off()
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 10,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.9,
select.var = list(name = c("feature672", "feature709", "feature248", "feature788",
"feature615", "feature1984", "feature801", "feature489",
"feature772", "feature815", "feature460", "feature1913",
"feature1620", "feature183", "feature702", "feature370")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
pdf("PCA-biplot_wfeatures.pdf", height = 14, width = 10.88)
fviz_pca_biplot(site.pca, geom.ind = "point",
fill.ind = pcatflex2$ATTRIBUTE_Site, col.ind = "black",
pointshape = 24, pointsize = 10,
palette = c("#597343", "#8435BB", "#36CDFF", "#DC61E5",
"#DAC75D", "#E15314", "#FF7983", "#d1db4b"),
addEllipses = TRUE, ellipse.level = 0.75,
select.var = list(name = c("feature672", "feature709", "feature248", "feature788",
"feature615", "feature1984", "feature801", "feature489",
"feature772", "feature815", "feature460", "feature1913",
"feature1620", "feature183", "feature702", "feature370")),
label = "var",
repel = TRUE, mean.point = FALSE,
#alpha.var = "contrib",
col.var = "contrib",
legend.title = "MS Features")
dev.off()
?fviz_pca_biplot
fviz_contrib(site.pca, choice = "var", axes = 1:2, top = 30)
fviz_contrib(site.pca, choice = "var", axes = 1:2, top = 200)
fviz_contrib(site.pca, choice = "var", axes = 1:2, top = 250)
?PCA
setwd("/Volumes/JensenLabMGs/alex_alyssa-MooreaMGs/moorea2020/metagenome_processing/MAGs/assemblies/binned_MAGs/dRep/binMAGanalysis/DRAM")
miscmeta <- read.table("misc.metabolism.tsv", header = T, sep = '\t')
miscmeta <- read.table("misc.metabolism.tsv", header = T, sep = '\t', quote = FALSE)
miscmeta <- read.table("misc.metabolism.tsv", header = T, sep = '\t', quote = "")
View(miscmeta)
unique(miscmeta$module)
miscmeta <- miscmeta[, -c(1,2,4,5)]
View(miscmeta)
miscmeta <- read.table("misc.metabolism.tsv", header = T, sep = '\t', quote = "")
miscmeta2 <- miscmeta[, -c(1,2,4,5)]
rownames(miscmeta2) <- miscmeta2$module
library(reshape2)
miscmeta2m <- melt(miscmeta2)
View(miscmeta2m)
View(miscmeta2)
View(miscmeta2m)
aggregate(value ~ module + variable, data = miscmeta2m, sum, na.rm = TRUE)
aggmisc <- aggregate(value ~ module + variable, data = miscmeta2m, sum, na.rm = TRUE)
View(aggmisc)
library(gplots)
miscmeta3 <- dcast(aggmisc, module ~ variable)
View(miscmeta3)
miscmeta3 <- as.matrix(dcast(aggmisc, module ~ variable))
View(miscmeta3)
heatmap.2(x=miscmeta3)
miscmeta3 <- as.matrix(dcast(aggmisc, module ~ variable, value.var = value))
miscmeta3 <- as.matrix(dcast(aggmisc, module ~ variable, value.var = "value"))
heatmap.2(x=miscmeta3)
View(miscmeta3)
miscmeta3 <- dcast(aggmisc, module ~ variable, value.var = "value")
rownames(miscmeta3) <- miscmeta3$module
miscmeta3$module <- NULL
heatmap.2(x=miscmeta3)
View(miscmeta3)
miscmeta3 <- as.matrix(miscmeta3)
heatmap.2(x=miscmeta3)
rownames(row_names_df_to_remove)
rownames(miscmeta3)
row_names_df_to_remove <- c("Ribosome, archaea", "Ribosome, bacteria")
miscmeta3[!(row.names(miscmeta3) %in% row_names_df_to_remove),]
miscmeta4 <- miscmeta3[!(row.names(miscmeta3) %in% row_names_df_to_remove),]
heatmap.2(x=miscmeta3)
heatmap.2(x=miscmeta3, scale="row",)
heatmap.2(x=miscmeta3, scale="column")
heatmap.2(x=miscmeta3, scale="row", col="bluered", dendrogram = column)
heatmap.2(x=miscmeta3, scale="row", col="bluered", dendrogram = "column")
miscmeta2 <- miscmeta[, -c(1,2,3,5)]
rownames(miscmeta2) <- miscmeta2$module
library(reshape2)
miscmeta2m <- melt(miscmeta2)
aggmisc <- aggregate(value ~ module + variable, data = miscmeta2m, sum, na.rm = TRUE)
miscmeta3 <- dcast(aggmisc, module ~ variable, value.var = "value")
rownames(miscmeta3) <- miscmeta3$module
miscmeta3$module <- NULL
rownames(miscmeta2) <- miscmeta2$header
library(reshape2)
miscmeta2m <- melt(miscmeta2)
aggmisc <- aggregate(value ~ module + variable, data = miscmeta2m, sum, na.rm = TRUE)
aggmisc <- aggregate(value ~ header + variable, data = miscmeta2m, sum, na.rm = TRUE)
miscmeta3 <- dcast(aggmisc, header ~ variable, value.var = "value")
rownames(miscmeta3) <- miscmeta3$header
miscmeta3$header <- NULL
miscmeta3 <- as.matrix(miscmeta3)
row_names_df_to_remove <- c("Ribosome, archaea", "Ribosome, bacteria")
miscmeta4 <- miscmeta3[!(row.names(miscmeta3) %in% row_names_df_to_remove),]
heatmap.2(x=miscmeta3, scale="row", col="bluered", dendrogram = "column")
heatmap.2(x=miscmeta3, scale="row", col="bluered")
heatmap.2(x=t(miscmeta3), scale="row", col="bluered")
heatmap.2(x=t(miscmeta3), scale="column", col="bluered")
